/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.storassa.javase.policercomparison;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author storassa
 */
public class MainTest extends javax.swing.JFrame {

    ArrayList<MEFPolicer> mefPolicers;
    ArrayList<IETFPolicer> ietfPolicers;
    ArrayList<String> policerIds;

    ArrayList<Source> sources;
    ArrayList<String> sourceIds;

    String filename;

    /**
     * Creates new form MainTest
     */
    public MainTest() {
        initComponents();

        setLocationRelativeTo(null);

        mefPolicers = new ArrayList<MEFPolicer>();
        ietfPolicers = new ArrayList<IETFPolicer>();
        policerIds = new ArrayList<String>();

        sources = new ArrayList<Source>();
        sourceIds = new ArrayList<String>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        editMenu = new javax.swing.JMenu();
        ietfMenu = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        mefMenu = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        sourceMenu = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Save");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem4);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save as...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        closeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        closeMenuItem.setText("Close");
        closeMenuItem.setEnabled(false);
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);
        fileMenu.add(jSeparator2);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Import");
        fileMenu.add(jMenuItem6);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Export");
        fileMenu.add(jMenuItem2);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Exit");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem7);
        fileMenu.add(jSeparator1);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.setEnabled(false);

        ietfMenu.setText("IETF policers");

        jMenuItem8.setText(".. create one ..");
        ietfMenu.add(jMenuItem8);

        editMenu.add(ietfMenu);

        mefMenu.setText("MEF policers");

        jMenuItem9.setText(".. create one ..");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        mefMenu.add(jMenuItem9);

        editMenu.add(mefMenu);

        sourceMenu.setText("Sources");

        jMenuItem10.setText(".. create one ..");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        sourceMenu.add(jMenuItem10);

        editMenu.add(sourceMenu);

        jMenuBar1.add(editMenu);

        runMenu.setText("Run");
        runMenu.setEnabled(false);
        runMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                runMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });
        runMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(runMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        editMenu.setEnabled(true);
        runMenu.setEnabled(true);
        closeMenuItem.setEnabled(true);
        openMenuItem.setEnabled(false);
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        EditMEFPolicer dialog = new EditMEFPolicer(this, rootPaneCheckingEnabled);
        dialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        EditSource dialog = new EditSource(this, rootPaneCheckingEnabled);
        dialog.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void runMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMenuActionPerformed

    }//GEN-LAST:event_runMenuActionPerformed

    private void runMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_runMenuMenuSelected
        if ((mefPolicers.size() > 0 || ietfPolicers.size() > 0) && sources.size() > 0) {
            RunSimulation form = new RunSimulation(mefPolicers, ietfPolicers, sources);
            form.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this,
                    "You should have at least one policer and one source to start a simulation",
                    "Input error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_runMenuMenuSelected

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();

            try {
                FileWriter fWriter = new FileWriter(file.getAbsoluteFile());
                BufferedWriter bWriter = new BufferedWriter(fWriter);
                Gson gson = new Gson();

                String result = gson.toJson(sources);
                result = result.concat(gson.toJson(mefPolicers));
                result = result.concat(gson.toJson(ietfPolicers));

                bWriter.append(result);
                bWriter.close();
                fWriter.close();

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();

            try {
                FileReader fReader = new FileReader(file.getAbsoluteFile());
                BufferedReader bReader = new BufferedReader(fReader);
                Gson gson = new Gson();
                JsonReader reader = new JsonReader(bReader);
                reader.setLenient(true);
                ArrayList<Source> loadSources = gson.fromJson(reader, new TypeToken<ArrayList<Source>>() {
                }.getType());

                for (Source s : loadSources) {
                    addSource(s);
                }

                ArrayList<MEFPolicer> loadMefPolicers = gson.fromJson(reader, new TypeToken<ArrayList<MEFPolicer>>() {
                }.getType());

                for (MEFPolicer p : loadMefPolicers) {
                    addPolicer(p);
                }

                ArrayList<IETFPolicer> loadIetfPolicers = gson.fromJson(reader, new TypeToken<ArrayList<IETFPolicer>>() {
                }.getType());

                for (IETFPolicer p : loadIetfPolicers) {
                    addPolicer(p);
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        openMenuItem.setEnabled(false);
        editMenu.setEnabled(true);
        runMenu.setEnabled(true);
        closeMenuItem.setEnabled(true);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void resetMembers() {
        int numMef = mefMenu.getItemCount();
        for (int i = numMef - 1; i > 0; i--)
            mefMenu.remove(i);
        
        int numIetf = ietfMenu.getItemCount();
        for (int i = numIetf - 1; i >0; i--)
            ietfMenu.remove(i);
        
        int numSource = sourceMenu.getItemCount();
        for (int i = numSource - 1; i > 0; i--)
            sourceMenu.remove(i);
        
        mefPolicers.clear();
        ietfPolicers.clear();
        sources.clear();

        policerIds.clear();
        sourceIds.clear();
        
        
    }

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        int returnVal = JOptionPane.showConfirmDialog(this,
                "Remember to save the project before closing it, otherwise you would lose all the configuration. Are you sure you want to close the project?",
                "Close current project",
                JOptionPane.YES_NO_OPTION);
        if (returnVal == JOptionPane.YES_OPTION) {
            
            closeMenuItem.setEnabled(false);
            editMenu.setEnabled(false);
            runMenu.setEnabled(false);
            resetMembers();
        }
    }//GEN-LAST:event_closeMenuItemActionPerformed

    void editMEFPolicer(MEFPolicer _policer
    ) {
        int idx = policerIds.indexOf(_policer.getId());
        MEFPolicer p = mefPolicers.get(idx);
        p.setCbs(_policer.getCbs());
        p.setCir(_policer.getCir());
        p.setEbs(_policer.getEbs());
        p.setEir(_policer.getEir());
    }

    void editSource(Source _source
    ) {
        int idx = sourceIds.indexOf(_source.getId());
        Source s = sources.get(idx);
        s.setHigh(_source.getHigh());
        s.setLow(_source.getLow());
        s.setPeriod(_source.getPeriod());
        s.setSourceType(_source.getSourceType());
    }

    public boolean addPolicer(final Policer _policer) {
        if (policerIds.contains(_policer.getId())) {
            return false;
        } else {
            policerIds.add(_policer.getId());
            String policerType = _policer.getClass().getName();
            if (policerType.equals(MEFPolicer.class.getName())) {
                mefPolicers.add((MEFPolicer) _policer);
                JMenuItem newItem = new JMenuItem(_policer.getId());
                newItem.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        EditMEFPolicer form = new EditMEFPolicer((MEFPolicer) _policer, MainTest.this, true);
                        form.setVisible(true);
                    }
                });
                mefMenu.add(newItem);
            } else if (policerType.equals(IETFPolicer.class.getName())) {
                ietfPolicers.add((IETFPolicer) _policer);
            } else {
                throw new IllegalArgumentException("The argument is not MEF not IETF policer");
            }
            return true;
        }
    }

    public boolean addSource(final Source _source) {
        if (sourceIds.contains(_source.getId())) {
            return false;
        } else {
            sourceIds.add(_source.getId());
            sources.add(_source);
            JMenuItem newItem = new JMenuItem(_source.getId());
            newItem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                    EditSource form = new EditSource(_source, MainTest.this, true);
                    form.setVisible(true);
                }
            });
            sourceMenu.add(newItem);
            return true;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu ietfMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu mefMenu;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenu sourceMenu;
    // End of variables declaration//GEN-END:variables

}
