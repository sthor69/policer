/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.storassa.javase.policercomparison;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author storassa
 */
public class SimulationPanel extends javax.swing.JPanel {

    Policer policer;
    Source source;
    double time;

    /**
     * Creates new form SimulationPanel
     */
    public SimulationPanel() {
        initComponents();

        policer = null;
        source = null;
    }

    public void setPolicer(Policer _policer) {

        if (policer != null) {
            policer.stop();
        }

        policer = _policer;
        policer.start();

    }

    public void setSource(Source _source) {

        source = _source;
    }

    public void setTime(double _time) {
        time = _time;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createTitledBorder("Simulation"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (source != null) {
            switch (source.getSourceType()) {

                case TRIANGULAR:
                    drawTriangular(g);
                    break;
                case SINUSOIDAL:
                    drawSinusoidal(g);
                    break;
                case RECTANGULAR:
                    drawRectangular(g);
                    break;
                case LINEAR:
                    drawLinear(g);
                    break;

            }
        }
    }

    private void drawLinear(Graphics g) {
        int x = 0;
        double cursor = 0;
        double low = source.getLow();
        double high = source.getHigh();

        double rate = low;
        int red, yellow, green;

        while (x < 800) {
            red = 0;
            yellow = 0;
            green = 0;

            while (cursor < time / x) {
                switch (policer.check(1)) {
                    case RED:
                        red++;
                        break;
                    case YELLOW:
                        yellow++;
                        break;
                    case GREEN:
                        green++;
                        break;
                }
                rate = low + (high - low) / time * cursor;
                cursor += 1 / rate;
            }

            g.setColor(Color.green);
            g.drawLine(x, 10, x, 10 + green);

            g.setColor(Color.yellow);
            g.drawLine(x, 10 + green, x, 10 + green + yellow);

            g.setColor(Color.red);
            g.drawLine(x, 10 + green + yellow, x, 10 + green + yellow + red);

            x++;
        }
    }

    private void drawRectangular(Graphics g) {

    }

    private void drawSinusoidal(Graphics g) {

    }

    private void drawTriangular(Graphics g) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
